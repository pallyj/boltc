import intrinsics

public struct Int64 {
	var repr: i64

	public struct Int32 {}

	/*public init (_ repr: i64) {
		self.repr = repr;
	}*/

	public func max(): Int64 {
		return Self(repr: 0x7fffffffffffffff)
	}

	public func min(): Int64 {
		return Self(repr: 0x8000000000000000)
	}

	/*public static func add(b: Self): Self {
		return Self(integer64Add(self.repr, b))
	}

	public static func sub(b: Self): Self {
		return Self(integer64Sub(self.repr, b))
	}

	public static func mul(b: Self): Self {
		return Self(integer64Mul(self.repr, b))
	}

	public static func div(b: Self): Self {
		return Self(integer64DivSig(self.repr, b))
	}

	public static func rem(b: Self): Self {
		return Self(integer64RemSig(self.repr, b))
	}


	public static func xor(b: Self): Self {
		return Self(integer64Xor(self.repr, b))
	}

	public static func and(b: Self): Self {
		return Self(integer64And(self.repr, b))
	}

	public static func or(b: Self): Self {
		return Self(integer64Or(self.repr, b))
	}

	public static func shl(b: Self): Self {
		return Self(integer64Shl(self.repr, b))
	}

	public static func shr(b: Self): Self {
		return Self(integer64ShrSig(self.repr, b))
	}


	public static func truncate32(b: Self): i32 {
		return Self(integer64Trunc32(self.repr, b))
	}

	public static func truncate16(b: Self): i16 {
		return Self(integer64Trunc16(self.repr, b))
	}

	public static func truncate8(b: Self): i8 {
		return Self(integer64Trunc8(self.repr, b))
	}

	public static func negate(): Self {
		return Self(integer64Negate(self.repr))
	}*/
}

func printi(i: Int64)

func printiraw(i: i64)

func factorial(i: i64): i64 {
	if integer64CmpGt(i, 1) {
		let a = integer64Mul(i, factorial(integer64Sub(i, 1)))

		printi(Int64(repr: a))

		return a
	}

	return 1
}

func main(): i64 {
	printiraw(Int64.max().repr)
	return 0
}