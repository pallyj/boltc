import intrinsics

@transparent
public struct Half /*: HalfLiteralRepr*/ {
	public var repr: f16

	// Arithmatic
	public func add(b: Half): Half {
		Half ( float16Add(self.repr, b.repr) )
	}

	public func sub(b: Half): Half {
		Half ( float16Sub(self.repr, b.repr) )
	}

	public func mul(b: Half): Half {
		Half ( float16Mul(self.repr, b.repr) )
	}

	public func div(b: Half): Half {
		Half ( float16Div(self.repr, b.repr) )
	}

	public func rem(b: Half): Half {
		Half ( float16Rem(self.repr, b.repr) )
	}

	// Comparison
	public func eq(b: Half): Bool {
		Bool ( float16CmpEq(self.repr, b.repr) )
	}

	public func neq(b: Half): Bool {
		Bool ( float16CmpNeq(self.repr, b.repr) )
	}

	public func lt(b: Half): Bool {
		Bool ( float16CmpLt(self.repr, b.repr) )
	}

	public func gt(b: Half): Bool {
		Bool ( float16CmpGt(self.repr, b.repr) )
	}

	public func lte(b: Half): Bool {
		Bool ( float16CmpLte(self.repr, b.repr) )
	}

	public func gte(b: Half): Bool {
		Bool ( float16CmpGte(self.repr, b.repr) )
	}

	// Negate
	public func negate(): Self {
		Self ( float16Negate(self.repr) )
	}


	// Convert from floats
	public static func truncDouble(float: Double): Half {
		Half ( float64Trunc16(float.repr) )
	}

	public static func truncFloat(float: Float): Half {
		Half ( float32Trunc16(float.repr) )
	}

	// Convert from integer
	public static func fromUInt(num: UInt64): Half {
		Half ( float16FromInt(num.repr) )
	}

	public static func fromInt(num: Int64): Half {
		Half ( float16FromIntSig(num.repr) )
	}

	public func print() {
		printFloat( float16Ext32(self.repr) )
	}
}