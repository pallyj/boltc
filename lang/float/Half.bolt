import intrinsics

@transparent
public struct Half /*: HalfLiteralRepr*/ {
	internal var repr: f16

	// Arithmatic
	public operator func add(b: Half): Half {
		Half (repr: float16Add(self.repr, b.repr) )
	}

	public operator func sub(b: Half): Half {
		Half (repr: float16Sub(self.repr, b.repr) )
	}

	public operator func mul(b: Half): Half {
		Half (repr: float16Mul(self.repr, b.repr) )
	}

	public operator func div(b: Half): Half {
		Half (repr: float16Div(self.repr, b.repr) )
	}

	public operator func mod(b: Half): Half {
		Half (repr: float16Rem(self.repr, b.repr) )
	}

	// Comparison
	public operator func equal(b: Half): Bool {
		Bool (repr: float16CmpEq(self.repr, b.repr) )
	}

	public operator func notEqual(b: Half): Bool {
		Bool (repr: float16CmpNeq(self.repr, b.repr) )
	}

	public operator func lessThan(b: Half): Bool {
		Bool (repr: float16CmpLt(self.repr, b.repr) )
	}

	public operator func greaterThan(b: Half): Bool {
		Bool (repr: float16CmpGt(self.repr, b.repr) )
	}

	public operator func lessThanEq(b: Half): Bool {
		Bool (repr: float16CmpLte(self.repr, b.repr) )
	}

	public operator func greaterThanEq(b: Half): Bool {
		Bool (repr: float16CmpGte(self.repr, b.repr) )
	}

	// Negate
	public operator func negate(): Self {
		Self (repr: float16Negate(self.repr) )
	}

	public operator func unit(): Self {
		self
	}

	// Convert from floats
	public init(truncating double: Double) {
		Half (repr: float64Trunc16(double.repr) )
	}

	public init(truncating float: Float) {
		Half (repr: float32Trunc16(float.repr) )
	}

	// Convert from integer
	public init(num: UInt64) {
		Half (repr: float16FromInt(num.repr) )
	}

	public init(num: Int64) {
		Half (repr: float16FromIntSig(num.repr) )
	}
}