import intrinsics

@transparent
public struct Half /*: HalfLiteralRepr*/ {
	internal var repr: f16

	// Arithmatic
	public operator func add(b: Half): Half {
		Half ( float16Add(self.repr, b.repr) )
	}

	public operator func sub(b: Half): Half {
		Half ( float16Sub(self.repr, b.repr) )
	}

	public operator func mul(b: Half): Half {
		Half ( float16Mul(self.repr, b.repr) )
	}

	public operator func div(b: Half): Half {
		Half ( float16Div(self.repr, b.repr) )
	}

	public operator func mod(b: Half): Half {
		Half ( float16Rem(self.repr, b.repr) )
	}

	// Comparison
	public operator func equal(b: Half): Bool {
		Bool ( float16CmpEq(self.repr, b.repr) )
	}

	public operator func notEqual(b: Half): Bool {
		Bool ( float16CmpNeq(self.repr, b.repr) )
	}

	public operator func lessThan(b: Half): Bool {
		Bool ( float16CmpLt(self.repr, b.repr) )
	}

	public operator func greaterThan(b: Half): Bool {
		Bool ( float16CmpGt(self.repr, b.repr) )
	}

	public operator func lessThanEq(b: Half): Bool {
		Bool ( float16CmpLte(self.repr, b.repr) )
	}

	public operator func greaterThanEq(b: Half): Bool {
		Bool ( float16CmpGte(self.repr, b.repr) )
	}

	// Negate
	public operator func negate(): Self {
		Self ( float16Negate(self.repr) )
	}

	public operator func unit(): Self {
		self
	}


	// Convert from floats
	public static func truncDouble(float: Double): Half {
		Half ( float64Trunc16(float.repr) )
	}

	public static func truncFloat(float: Float): Half {
		Half ( float32Trunc16(float.repr) )
	}

	// Convert from integer
	public static func fromUInt(num: UInt64): Half {
		Half ( float16FromInt(num.repr) )
	}

	public static func fromInt(num: Int64): Half {
		Half ( float16FromIntSig(num.repr) )
	}
}