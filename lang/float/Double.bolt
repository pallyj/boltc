import intrinsics

@transparent
public struct Double /*: FloatLiteralRepr*/ {
	internal var repr: f64

	// Arithmatic
	public operator func add(b: Double): Double {
		Double (repr: float64Add(self.repr, b.repr) )
	}

	public operator func sub(b: Double): Double {
		Double (repr: float64Sub(self.repr, b.repr) )
	}

	public operator func mul(b: Double): Double {
		Double (repr: float64Mul(self.repr, b.repr) )
	}

	public operator func div(b: Double): Double {
		Double (repr: float64Div(self.repr, b.repr) )
	}

	public operator func mod(b: Double): Double {
		Double (repr: float64Rem(self.repr, b.repr) )
	}

	// Comparison
	public operator func equal(b: Double): Bool {
		Bool (repr: float64CmpEq(self.repr, b.repr) )
	}

	public operator func notEqual(b: Double): Bool {
		Bool (repr: float64CmpNeq(self.repr, b.repr) )
	}

	public operator func lessThan(b: Double): Bool {
		Bool (repr: float64CmpLt(self.repr, b.repr) )
	}

	public operator func greaterThan(b: Double): Bool {
		Bool (repr: float64CmpGt(self.repr, b.repr) )
	}

	public operator func lessThanEq(b: Double): Bool {
		Bool (repr: float64CmpLte(self.repr, b.repr) )
	}

	public operator func greaterThanEq(b: Double): Bool {
		Bool (repr: float64CmpGte(self.repr, b.repr) )
	}

	// Negate
	public operator func negate(): Self {
		Self (repr: float64Negate(self.repr) )
	}

	public operator func unit(): Self {
		self
	}


	// Convert from floats
	public init(float: Float) {
		Double (repr: float32Ext64(float.repr) )
	}

	public init(float: Half) {
		Double (repr: float16Ext64(float.repr) )
	}

	// Convert from integer
	public init(num: UInt64) {
		Double (repr: float64FromInt(num.repr) )
	}

	public init(num: Int64) {
		Double (repr: float64FromIntSig(num.repr) )
	}

	/*public func prompt(prompt: StringSlice): Self {
		print(prompt, newline: false)
		Self(repr: readInternalDouble())
	}*/
}