import intrinsics

public struct Double /*: FloatLiteralRepr*/ {
	internal var repr: f64

	// Arithmatic
	public func add(b: Double): Double {
		Double ( float64Add(self.repr, b.repr) )
	}

	public func sub(b: Double): Double {
		Double ( float64Sub(self.repr, b.repr) )
	}

	public func mul(b: Double): Double {
		Double ( float64Mul(self.repr, b.repr) )
	}

	public func div(b: Double): Double {
		Double ( float64Div(self.repr, b.repr) )
	}

	public func rem(b: Double): Double {
		Double ( float64Rem(self.repr, b.repr) )
	}

	// Comparison
	public func eq(b: Double): Bool {
		Bool ( float64CmpEq(self.repr, b.repr) )
	}

	public func neq(b: Double): Bool {
		Bool ( float64CmpNeq(self.repr, b.repr) )
	}

	public func lt(b: Double): Bool {
		Bool ( float64CmpLt(self.repr, b.repr) )
	}

	public func gt(b: Double): Bool {
		Bool ( float64CmpGt(self.repr, b.repr) )
	}

	public func lte(b: Double): Bool {
		Bool ( float64CmpLte(self.repr, b.repr) )
	}

	public func gte(b: Double): Bool {
		Bool ( float64CmpGte(self.repr, b.repr) )
	}

	// Negate
	public func negate(): Self {
		Self ( float64Negate(self.repr) )
	}


	// Convert from floats
	public static func extendFloat(float: Float): Double {
		Double ( float32Ext64(float.repr) )
	}

	public static func extendHalf(float: Half): Double {
		Double ( float16Ext64(float.repr) )
	}

	// Convert from integer
	public static func fromUInt(num: UInt64): Double {
		Double ( float64FromInt(num.repr) )
	}

	public static func fromInt(num: Int64): Double {
		Double ( float64FromIntSig(num.repr) )
	}
}