import intrinsics

@defaultStringRepr
@transparent
public struct StringSlice {
	internal var slice: strslice

	public func length(): Int {
		Int(repr: strslice_len(self.slice))
	}

	public operator func equal(other: StringSlice): Bool {
		strslice_eq(self.slice, other.slice)
	}

	public operator func notEqual(other: StringSlice): Bool {
		strslice_neq(self.slice, other.slice)
	}

	public operator func index(range: IntRange): StringSlice {
		let len = self.length();

		//if range.top() >= len || range.top() < 0 { /* return nil */ }
		//if (range.top() < range.bottom()) || range.bottom() < 0 { /* return nil */ }

		Self(slice: strslice_slice(self.slice, range.bottom(), range.top()))
	}
}

/*
enum OptionalStringSlice {
	case some(StringSlice)
	case none
}
*/

fileprivate func strslice_eq(one: strslice, two: strslice): Bool
fileprivate func strslice_neq(one: strslice, two: strslice): Bool
fileprivate func strslice_slice(slice: strslice, start: Int, end: Int): strslice
fileprivate func strslice_extend(slice: strslice, delta: Int): strslice
fileprivate func strslice_head_slice(slice: strslice, delta: Int): strslice