import intrinsics

fileprivate func printInt8(i: i8) 
fileprivate func printUInt8(i: i8)

fileprivate func printInt16(i: i16)
fileprivate func printUInt16(i: i16)

fileprivate func printInt32(i: i32)
fileprivate func printUInt32(i: i32)

fileprivate func printInt64(i: i64)
fileprivate func printUInt64(i: i64)

fileprivate func printDouble(n: f64)
fileprivate func printFloat(n: f32)

fileprivate func printBool(n: i1)

fileprivate func printString(string: strslice)

fileprivate func printChar(c: i32);

internal func readInternalInt(): i64
internal func readInternalUInt(): i64
//internal func readInternalDouble(): f64
internal func readInternalChar(): i32

public func printLine()

public func print(b: Bool, newline newline: Bool) {
	printBool(b.repr)
	if newline {
		printLine()
	}
}

public func print(f: Half, newline newline: Bool) {
	printFloat( float16Ext32(f.repr) )
	if newline {
		printLine()
	}
}

public func print(f: Float, newline newline: Bool) {
	printFloat( f.repr )
	if newline {
		printLine()
	}
}

public func print(f: Double, newline newline: Bool) {
	printDouble( f.repr )
	if newline {
		printLine()
	}
}

public func print(i: Int, newline newline: Bool) {
	printInt64(i.repr)
	if newline {
		printLine()
	}
}

public func print(i: Int64, newline newline: Bool) {
	printInt64(i.repr)
	if newline {
		printLine()
	}
}

public func print(i: Int32, newline newline: Bool) {
	printInt32(i.repr)
	if newline {
		printLine()
	}
}
public func print(i: Int16, newline newline: Bool) {
	printInt16(i.repr)
	if newline {
		printLine()
	}
}

public func print(i: Int8, newline newline: Bool) {
	printInt8(i.repr)
	if newline {
		printLine()
	}
}

public func print(i: UInt, newline newline: Bool) {
	printUInt64(i.repr)
	if newline {
		printLine()
	}
}

public func print(i: UInt64, newline newline: Bool) {
	printUInt64(i.repr)
	if newline {
		printLine()
	}
}

public func print(i: UInt32, newline newline: Bool) {
	printUInt32(i.repr)
	if newline {
		printLine()
	}
}
public func print(i: UInt16, newline newline: Bool) {
	printUInt16(i.repr)
	if newline {
		printLine()
	}
}

public func print(i: UInt8, newline newline: Bool) {
	printUInt8(i.repr)
	if newline {
		printLine()
	}
}

public func print(s: StringSlice, newline newline: Bool) {
	printString(s.slice)
	if newline {
		printLine()
	}
}

public func print(c: Char, newline newline: Bool) {
	printChar(c.repr)
	if newline {
		printLine()
	}
}


public func print(b: Bool) {
	printBool(b.repr)
	printLine()
}

public func print(f: Half) {
	printFloat( float16Ext32(f.repr) )
	printLine()
}

public func print(f: Float) {
	printFloat( f.repr )
	printLine()
}

public func print(f: Double) {
	printDouble( f.repr )
	printLine()
}

public func print(i: Int) {
	printInt64(i.repr)
	printLine()
}

public func print(i: Int64) {
	printInt64(i.repr)
	printLine()
}

public func print(i: Int32) {
	printInt32(i.repr)
	printLine()
}
public func print(i: Int16) {
	printInt16(i.repr)
	printLine()
}

public func print(i: Int8) {
	printInt8(i.repr)
	printLine()
}

public func print(i: UInt) {
	printUInt64(i.repr)
	printLine()
}

public func print(i: UInt64) {
	printUInt64(i.repr)
	printLine()
}

public func print(i: UInt32) {
	printUInt32(i.repr)
	printLine()
}
public func print(i: UInt16) {
	printUInt16(i.repr)
	printLine()
}

public func print(i: UInt8) {
	printUInt8(i.repr)
	printLine()
}

public func print(s: StringSlice) {
	printString(s.slice)
	printLine()
}

public func print(c: Char) {
	printChar(c.repr)
	printLine()
}

public func print(label: StringSlice, n: Int) {
	printString(label.slice)
	printInt64(n.repr)
	printLine()
}

public func print(label: StringSlice, n: Float) {
	printString(label.slice)
	printFloat(n.repr)
	printLine()
}