import intrinsics

//@transparent
//@defaultIntegerLiteral
public struct Int /*: IntegerLiteralRepr */ {
	public static let min: Int = 0xffff_ffff_ffff_ffff
	public static let max: Int = 0x7fff_ffff_ffff_ffff

	internal var repr: i64

	public func add(b: Self): Self {
		Self( integer64Add(self.repr, b.repr) )
	}

	public func sub(b: Self): Self {
		Self( integer64Sub(self.repr, b.repr) )
	}

	public func mul(b: Self): Self {
		Self ( integer64Mul(self.repr, b.repr) )
	}

	public func div(b: Self): Self {
		Self ( integer64DivSig(self.repr, b.repr) )
	}

	public func mod(b: Self): Self {
		Self ( integer64RemSig(self.repr, b.repr) )
	}


	public func or(b: Self): Self {
		Self ( integer64Or(self.repr, b.repr) )
	}

	public func xor(b: Self): Self {
		Self ( integer64Xor(self.repr, b.repr) )
	}

	public func and(b: Self): Self {
		Self ( integer64And(self.repr, b.repr) )
	}

	public func shiftLeft(b: Self): Self {
		Self ( integer64Shl(self.repr, b.repr) )
	}

	public func shiftRight(b: Self): Self {
		Self ( integer64ShrSig(self.repr, b.repr) )
	}


	public func eq(b: Self): Bool {
		Bool ( integer64CmpEq(self.repr, b.repr) )
	}

	public func neq(b: Self): Bool {
		Bool ( integer64CmpNeq(self.repr, b.repr) )
	}

	public func lt(b: Self): Bool {
		Bool ( integer64CmpLtSig(self.repr, b.repr) )
	}

	public func gt(b: Self): Bool {
		Bool ( integer64CmpGtSig(self.repr, b.repr) )
	}

	public func lte(b: Self): Bool {
		Bool ( integer64CmpLteSig(self.repr, b.repr) )
	}

	public func gte(b: Self): Bool {
		Bool ( integer64CmpGteSig(self.repr, b.repr) )
	}

	
	public func negate(): Self {
		Self ( integer64Negate(self.repr) )
	}

	public func invert(): Self {
		Self ( integer64Invert(self.repr) )
	}

	
	public static func fromFloat(f: Float): Self {
		Int ( float32ToIntSig(f.repr) )
	}

	public static func fromDouble(f: Double): Self {
		Int ( float64ToIntSig(f.repr) )
	}

	public static func fromHalf(f: Half): Self {
		Int ( float16ToIntSig(f.repr) )
	}

	public static func extendInt8(i: Int8): Self {
		Int ( integer8ExtSig64(i) )
	}

	public static func extendInt16(i: Int16): Self {
		Int ( integer16ExtSig64(i) )
	}

	public static func extendInt32(i: Int32): Self {
		Int ( integer32ExtSig64(i) )
	}

	public static func fromInt64(i: Int64): Self {
		Int ( i.repr )
	}

	public static func extendUInt8(i: UInt8): Self {
		Int ( integer8ExtZero64(i) )
	}

	public static func extendUInt16(i: UInt16): Self {
		Int ( integer16ExtZero64(i) )
	}

	public static func extendUInt32(i: UInt32): Self {
		Int ( integer32ExtZero64(i) )
	}

	// Convert from integers

	public static func bitcastUInt64(i: UInt64): Self {
		Int ( i.repr )
	}

	public static func bitcastUInt(i: UInt): Self {
		Int ( i.repr )
	}
}