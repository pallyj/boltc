import intrinsics

@transparent
@defaultIntegerRepr
public struct Int /*: IntegerLiteralRepr */ {
	public static let min: Int = 0xffff_ffff_ffff_ffff
	public static let max: Int = 0x7fff_ffff_ffff_ffff

	internal var repr: i64

	public operator func add(b: Self): Self {
		Self( integer64Add(self.repr, b.repr) )
	}

	public operator func sub(b: Self): Self {
		Self( integer64Sub(self.repr, b.repr) )
	}

	public operator func mul(b: Self): Self {
		Self ( integer64Mul(self.repr, b.repr) )
	}

	public operator func div(b: Self): Self {
		Self ( integer64DivSig(self.repr, b.repr) )
	}

	public operator func mod(b: Self): Self {
		Self ( integer64RemSig(self.repr, b.repr) )
	}


	public operator func bitOr(b: Self): Self {
		Self ( integer64Or(self.repr, b.repr) )
	}

	public operator func bitXor(b: Self): Self {
		Self ( integer64Xor(self.repr, b.repr) )
	}

	public func bitAnd(b: Self): Self {
		Self ( integer64And(self.repr, b.repr) )
	}

	public operator func shiftLeft(b: Self): Self {
		Self ( integer64Shl(self.repr, b.repr) )
	}

	public operator func shiftRight(b: Self): Self {
		Self ( integer64ShrSig(self.repr, b.repr) )
	}


	public operator func equal(b: Self): Bool {
		Bool ( integer64CmpEq(self.repr, b.repr) )
	}

	public operator func notEqual(b: Self): Bool {
		Bool ( integer64CmpNeq(self.repr, b.repr) )
	}

	public operator func lessThan(b: Self): Bool {
		Bool ( integer64CmpLtSig(self.repr, b.repr) )
	}

	public operator func greaterThan(b: Self): Bool {
		Bool ( integer64CmpGtSig(self.repr, b.repr) )
	}

	public operator func lessThanEq(b: Self): Bool {
		Bool ( integer64CmpLteSig(self.repr, b.repr) )
	}

	public operator func greaterThanEq(b: Self): Bool {
		Bool ( integer64CmpGteSig(self.repr, b.repr) )
	}

	public operator func unit(): Self {
		self
	}

	public operator func openRange(upper: Self): IntRange {
		IntRange(self, upper + 1)
	}

	public operator func closedRange(upper: Self): IntRange {
		IntRange(self, upper)
	}


	
	public operator func negate(): Self {
		Self ( integer64Negate(self.repr) )
	}

	public operator func invert(): Self {
		Self ( integer64Invert(self.repr) )
	}

	
	public static func fromFloat(f: Float): Self {
		Int ( float32ToIntSig(f.repr) )
	}

	public static func fromDouble(f: Double): Self {
		Int ( float64ToIntSig(f.repr) )
	}

	public static func fromHalf(f: Half): Self {
		Int ( float16ToIntSig(f.repr) )
	}

	public static func extendInt8(i: Int8): Self {
		Int ( integer8ExtSig64(i.repr) )
	}

	public static func extendInt16(i: Int16): Self {
		Int ( integer16ExtSig64(i.repr) )
	}

	public static func extendInt32(i: Int32): Self {
		Int ( integer32ExtSig64(i.repr) )
	}

	public static func fromInt64(i: Int64): Self {
		Int ( i.repr )
	}

	public static func extendUInt8(i: UInt8): Self {
		Int ( integer8ExtZero64(i.repr) )
	}

	public static func extendUInt16(i: UInt16): Self {
		Int ( integer16ExtZero64(i.repr) )
	}

	public static func extendUInt32(i: UInt32): Self {
		Int ( integer32ExtZero64(i.repr) )
	}

	// Convert from integers

	public static func bitcastUInt64(i: UInt64): Self {
		Int ( i.repr )
	}

	public static func bitcastUInt(i: UInt): Self {
		Int ( i.repr )
	}
}

public struct IntRange {
	fileprivate var low: Int
	fileprivate var high: Int
}

public func for(range: IntRange, f: func (Int)) {
	if range.low != range.high {
		f(range.low);
		for(range.low + 1..<range.high, f)
	}
}