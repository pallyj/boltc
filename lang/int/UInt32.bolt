import intrinsics

@transparent
public struct UInt32 /*: IntegerLiteralRepresentable */ {
	public static let min: UInt32 = 0x0
	public static let max: UInt32 = 0xffff_ffff_ffff_ffff

	public var repr: i32

	public func add(b: Self): Self {
		Self( integer32Add(self.repr, b.repr) )
	}

	public func sub(b: Self): Self {
		Self( integer32Sub(self.repr, b.repr) )
	}

	public func mul(b: Self): Self {
		Self ( integer32Mul(self.repr, b.repr) )
	}

	public func div(b: Self): Self {
		Self ( integer32Div(self.repr, b.repr) )
	}

	public func mod(b: Self): Self {
		Self ( integer32Rem(self.repr, b.repr) )
	}


	public func bitOr(b: Self): Self {
		Self ( integer32Or(self.repr, b.repr) )
	}

	public func bitXor(b: Self): Self {
		Self ( integer32Xor(self.repr, b.repr) )
	}

	public func bitAnd(b: Self): Self {
		Self ( integer32And(self.repr, b.repr) )
	}

	public func shiftLeft(b: Self): Self {
		Self ( integer32Shl(self.repr, b.repr) )
	}

	public func shiftRight(b: Self): Self {
		Self ( integer32Shr(self.repr, b.repr) )
	}


	public operator func equalual(b: Self): Bool {
		Bool ( integer32CmpEq(self.repr, b.repr) )
	}

	public func notEqual(b: Self): Bool {
		Bool ( integer32CmpNeq(self.repr, b.repr) )
	}

	public func lessThan(b: Self): Bool {
		Bool ( integer32CmpLt(self.repr, b.repr) )
	}

	public func greaterThan(b: Self): Bool {
		Bool ( integer32CmpGt(self.repr, b.repr) )
	}

	public func lessThanEq(b: Self): Bool {
		Bool ( integer32CmpLte(self.repr, b.repr) )
	}

	public func greaterThanEq(b: Self): Bool {
		Bool ( integer32CmpGte(self.repr, b.repr) )
	}

	
	public func negate(): Self {
		Self ( integer32Negate(self.repr) )
	}

	public func invert(): Self {
		Self ( integer32Invert(self.repr) )
	}

	public operator func unit(): Self {
		self
	}

	public operator func openRange(upper: Self): UInt32Range {
		UInt32Range(self, upper + 1)
	}

	public operator func closedRange(upper: Self): UInt32Range {
		UInt32Range(self, upper)
	}

	public static func bitcastInt8(i: Int8): Self {
		UInt32 ( integer8ExtZero32(i.repr) )
	}

	public static func bitcastInt16(i: Int16): Self {
		UInt32 ( integer16ExtZero32(i.repr) )
	}

	public static func bitcastInt32(i: Int32): Self {
		UInt32 ( i.repr )
	}

	public static func extendUInt8(i: UInt8): Self {
		UInt32 ( integer8ExtZero32(i.repr) )
	}

	public static func extendUInt16(i: UInt16): Self {
		UInt32 ( integer16ExtZero32(i.repr) )
	}

	public static func truncUInt64(i: UInt64): Self {
		UInt32 ( integer64Trunc32(i.repr) )
	}

	public static func truncInt64(i: Int64): Self {
		UInt32 ( integer64Trunc32(i.repr) )
	}
}

public struct UInt32Range {
	fileprivate var low: UInt8
	fileprivate var high: UInt8
}

public func for(range: UInt32Range, f: func (UInt32)) {
	if range.low != range.high {
		f(range.low);
		for(range.low + 1..<range.high, f)
	}
}