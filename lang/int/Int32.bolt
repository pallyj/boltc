import intrinsics

@transparent
public struct Int32 /*: IntegerLiteralRepr */ {
	public static let min: Int32 = 0xffff_ffff
	public static let max: Int32 = 0x7fff_ffff

	internal var repr: i32

	public operator func add(b: Self): Self {
		Self(repr: integer32Add(self.repr, b.repr) )
	}

	public operator func sub(b: Self): Self {
		Self(repr: integer32Sub(self.repr, b.repr) )
	}

	public operator func mul(b: Self): Self {
		Self (repr: integer32Mul(self.repr, b.repr) )
	}

	public operator func div(b: Self): Self {
		Self (repr: integer32DivSig(self.repr, b.repr) )
	}

	public operator func mod(b: Self): Self {
		Self (repr: integer32RemSig(self.repr, b.repr) )
	}


	public operator func bitOr(b: Self): Self {
		Self (repr: integer32Or(self.repr, b.repr) )
	}

	public operator func bitXor(b: Self): Self {
		Self (repr: integer32Xor(self.repr, b.repr) )
	}

	public operator func bitAnd(b: Self): Self {
		Self (repr: integer32And(self.repr, b.repr) )
	}

	public operator func shiftLeft(b: Self): Self {
		Self (repr: integer32Shl(self.repr, b.repr) )
	}

	public operator func shiftRight(b: Self): Self {
		Self (repr: integer32ShrSig(self.repr, b.repr) )
	}


	public operator func equal(b: Self): Bool {
		Bool (repr: integer32CmpEq(self.repr, b.repr) )
	}

	public operator func notEqual(b: Self): Bool {
		Bool (repr: integer32CmpNeq(self.repr, b.repr) )
	}

	public operator func lessThan(b: Self): Bool {
		Bool (repr: integer32CmpLtSig(self.repr, b.repr) )
	}

	public operator func greaterThan(b: Self): Bool {
		Bool (repr: integer32CmpGtSig(self.repr, b.repr) )
	}

	public operator func lessThanEq(b: Self): Bool {
		Bool (repr: integer32CmpLteSig(self.repr, b.repr) )
	}

	public operator func greaterThanEq(b: Self): Bool {
		Bool (repr: integer32CmpGteSig(self.repr, b.repr) )
	}

	
	public operator func negate(): Self {
		Self (repr: integer32Negate(self.repr) )
	}

	public operator func invert(): Self {
		Self (repr: integer32Invert(self.repr) )
	}

	public operator func unit(): Self {
		self
	}

	public operator func openRange(upper: Self): Int32Range {
		Int32Range(low: self, high: upper + 1)
	}

	public operator func closedRange(upper: Self): Int32Range {
		Int32Range(low: self, high: upper)
	}

	public init(i: UInt8) {
		Int32 (repr: integer8ExtZero32(i.repr) )
	}

	public init(i: UInt16) {
		Int32 (repr: integer16ExtZero32(i.repr) )
	}

	public init(truncating i: UInt64) {
		Self (repr: integer64Trunc32(i.repr) )
	}

	public init(i: Int8) {
		Self (repr: integer8ExtSig32(i.repr) )
	}

	public init(i: Int16) {
		Self (repr: integer16ExtSig32(i.repr) )
	}

	public init(truncating i: Int64) {
		Self (repr: integer64Trunc32(i.repr) )
	}

	// Convert from integers

	public init(bitcast i: UInt32) {
		Self (repr: i.repr )
	}
}

public struct Int32Range {
	fileprivate var low: Int32
	fileprivate var high: Int32
}

public func for(range: Int32Range, closure: func (Int32)) {
	if range.low != range.high {
		closure(range.low);
		for(range.low + 1..<range.high, closure)
	}
}