import intrinsics

@transparent
public struct UInt16 /*: IntegerLiteralRepresentable */ {
	public static let min: Self = 0x0
	public static let max: Self = 0xffff_ffff_ffff_ffff

	public var repr: i16

	public operator func add(b: Self): Self {
		Self(repr: integer16Add(self.repr, b.repr) )
	}

	public operator func sub(b: Self): Self {
		Self(repr: integer16Sub(self.repr, b.repr) )
	}

	public operator func mul(b: Self): Self {
		Self (repr: integer16Mul(self.repr, b.repr) )
	}

	public operator func div(b: Self): Self {
		Self (repr: integer16Div(self.repr, b.repr) )
	}

	public operator func mod(b: Self): Self {
		Self (repr: integer16Rem(self.repr, b.repr) )
	}


	public operator func bitOr(b: Self): Self {
		Self (repr: integer16Or(self.repr, b.repr) )
	}

	public operator func bitXor(b: Self): Self {
		Self (repr: integer16Xor(self.repr, b.repr) )
	}

	public operator func bitAnd(b: Self): Self {
		Self (repr: integer16And(self.repr, b.repr) )
	}

	public operator func shiftLeft(b: Self): Self {
		Self (repr: integer16Shl(self.repr, b.repr) )
	}

	public operator func shiftRight(b: Self): Self {
		Self (repr: integer16Shr(self.repr, b.repr) )
	}


	public operator func equal(b: Self): Bool {
		Bool (repr: integer16CmpEq(self.repr, b.repr) )
	}

	public operator func notEqual(b: Self): Bool {
		Bool (repr: integer16CmpNeq(self.repr, b.repr) )
	}

	public operator func lessThan(b: Self): Bool {
		Bool (repr: integer16CmpLt(self.repr, b.repr) )
	}

	public operator func greaterThan(b: Self): Bool {
		Bool (repr: integer16CmpGt(self.repr, b.repr) )
	}

	public operator func lessThanEq(b: Self): Bool {
		Bool (repr: integer16CmpLte(self.repr, b.repr) )
	}

	public operator func greaterThanEq(b: Self): Bool {
		Bool (repr: integer16CmpGte(self.repr, b.repr) )
	}

	
	public operator func negate(): Self {
		Self (repr: integer16Negate(self.repr) )
	}

	public operator func invert(): Self {
		Self (repr: integer16Invert(self.repr) )
	}

	public operator func unit(): Self {
		self
	}

	public operator func openRange(upper: Self): UInt16Range {
		UInt16Range(low: self, high: upper + 1)
	}

	public operator func closedRange(upper: Self): UInt16Range {
		UInt16Range(low: self, high: upper)
	}


	public static func bitcastInt8(i: Int8): Self {
		Self (repr: integer8ExtZero16(i.repr) )
	}

	public static func extendUInt8(i: UInt8): Self {
		Self (repr: integer8ExtZero16(i.repr) )
	}

	public static func truncUInt64(i: UInt64): Self {
		Self (repr: integer64Trunc16(i.repr) )
	}

	public static func truncInt64(i: Int64): Self {
		Self (repr: integer64Trunc16(i.repr) )
	}

	public static func truncUInt32(i: UInt32): Self {
		Self (repr: integer32Trunc16(i.repr) )
	}

	public static func truncInt32(i: Int32): Self {
		Self (repr: integer32Trunc16(i.repr) )
	}
}

public struct UInt16Range {
	fileprivate var low: UInt16
	fileprivate var high: UInt16
}

public func for(range: UInt16Range, f: func (UInt16)) {
	if range.low != range.high {
		f(range.low);
		for(range.low + 1..<range.high, f)
	}
}