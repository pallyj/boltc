import intrinsics

@transparent
public struct UInt64 /*: IntegerLiteralRepresentable */ {
	public static let min: UInt64 = 0x0
	public static let max: UInt64 = 0xffff_ffff_ffff_ffff

	public var repr: i64

	public operator func add(b: Self): Self {
		Self(repr: integer64Add(self.repr, b.repr) )
	}

	public operator func sub(b: Self): Self {
		Self(repr: integer64Sub(self.repr, b.repr) )
	}

	public operator func mul(b: Self): Self {
		Self (repr: integer64Mul(self.repr, b.repr) )
	}

	public operator func div(b: Self): Self {
		Self (repr: integer64Div(self.repr, b.repr) )
	}

	public operator func mod(b: Self): Self {
		Self (repr: integer64Rem(self.repr, b.repr) )
	}


	public operator func bitOr(b: Self): Self {
		Self (repr: integer64Or(self.repr, b.repr) )
	}

	public operator func bitXor(b: Self): Self {
		Self (repr: integer64Xor(self.repr, b.repr) )
	}

	public operator func bitAnd(b: Self): Self {
		Self (repr: integer64And(self.repr, b.repr) )
	}

	public operator func shiftLeft(b: Self): Self {
		Self (repr: integer64Shl(self.repr, b.repr) )
	}

	public operator func shiftRight(b: Self): Self {
		Self (repr: integer64Shr(self.repr, b.repr) )
	}


	public operator func equal(b: Self): Bool {
		Bool (repr: integer64CmpEq(self.repr, b.repr) )
	}

	public operator func notEqual(b: Self): Bool {
		Bool (repr: integer64CmpNeq(self.repr, b.repr) )
	}

	public operator func lessThan(b: Self): Bool {
		Bool (repr: integer64CmpLt(self.repr, b.repr) )
	}

	public operator func greaterThan(b: Self): Bool {
		Bool (repr: integer64CmpGt(self.repr, b.repr) )
	}

	public operator func lessThanEq(b: Self): Bool {
		Bool (repr: integer64CmpLte(self.repr, b.repr) )
	}

	public operator func greaterThanEq(b: Self): Bool {
		Bool (repr: integer64CmpGte(self.repr, b.repr) )
	}

	
	public operator func negate(): Self {
		Self (repr: integer64Negate(self.repr) )
	}

	public operator func invert(): Self {
		Self (repr: integer64Invert(self.repr) )
	}


	public operator func unit(): Self {
		self
	}

	public operator func openRange(upper: Self): UInt64Range {
		UInt64Range(low: self, high: upper + 1)
	}

	public operator func closedRange(upper: Self): UInt64Range {
		UInt64Range(low: self, high: upper)
	}

	
	public static func fromFloat(f: Float): Self {
		Self (repr: float32ToInt(f.repr) )
	}

	public static func fromDouble(f: Double): Self {
		Self (repr: float64ToInt(f.repr) )
	}

	public static func fromHalf(f: Half): Self {
		Self (repr: float16ToInt(f.repr) )
	}

	public static func bitcastInt8(i: Int8): Self {
		Self (repr: integer8ExtZero64(i.repr) )
	}

	public static func bitcastInt16(i: Int16): Self {
		Self (repr: integer16ExtZero64(i.repr) )
	}

	public static func bitcastInt32(i: Int32): Self {
		Self (repr: integer32ExtZero64(i.repr) )
	}

	public static func fromUInt(i: UInt): Self {
		Self (repr: i.repr )
	}

	public static func extendUInt8(i: UInt8): Self {
		Self (repr: integer8ExtZero64(i.repr) )
	}

	public static func extendUInt16(i: UInt16): Self {
		Self (repr: integer16ExtZero64(i.repr) )
	}

	public static func extendUInt32(i: UInt32): Self {
		Self (repr: integer32ExtZero64(i.repr) )
	}

	// Convert from integers

	public static func bitcastInt(i: Int): Self {
		Self (repr: i.repr )
	}

	public static func bitcastInt64(i: Int64): Self {
		Self (repr: i.repr )
	}
}

public struct UInt64Range {
	fileprivate var low: UInt64
	fileprivate var high: UInt64
}

public func for(range: UInt64Range, f: func (UInt64)) {
	if range.low != range.high {
		f(range.low);
		for(range.low + 1..<range.high, f)
	}
}