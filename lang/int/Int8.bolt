import intrinsics

@transparent
public struct Int8 /*: IntegerLiteralRepr */ {
	public static let min: Int8 = 0xff
	public static let max: Int8 = 0x7f

	internal var repr: i8

	public operator func add(b: Self): Self {
		Self(repr: integer8Add(self.repr, b.repr) )
	}

	public operator func sub(b: Self): Self {
		Self(repr: integer8Sub(self.repr, b.repr) )
	}

	public operator func mul(b: Self): Self {
		Self (repr: integer8Mul(self.repr, b.repr) )
	}

	public operator func div(b: Self): Self {
		Self (repr: integer8DivSig(self.repr, b.repr) )
	}

	public operator func mod(b: Self): Self {
		Self (repr: integer8RemSig(self.repr, b.repr) )
	}


	public operator func bitOr(b: Self): Self {
		Self (repr: integer8Or(self.repr, b.repr) )
	}

	public operator func bitXor(b: Self): Self {
		Self (repr: integer8Xor(self.repr, b.repr) )
	}

	public operator func bitAnd(b: Self): Self {
		Self (repr: integer8And(self.repr, b.repr) )
	}

	public operator func shiftLeft(b: Self): Self {
		Self (repr: integer8Shl(self.repr, b.repr) )
	}

	public operator func shiftRight(b: Self): Self {
		Self (repr: integer8ShrSig(self.repr, b.repr) )
	}


	public operator func equal(b: Self): Bool {
		Bool (repr: integer8CmpEq(self.repr, b.repr) )
	}

	public operator func notEqual(b: Self): Bool {
		Bool (repr: integer8CmpNeq(self.repr, b.repr) )
	}

	public operator func lessThan(b: Self): Bool {
		Bool (repr: integer8CmpLtSig(self.repr, b.repr) )
	}

	public operator func greaterThan(b: Self): Bool {
		Bool (repr: integer8CmpGtSig(self.repr, b.repr) )
	}

	public operator func lessThanEq(b: Self): Bool {
		Bool (repr: integer8CmpLteSig(self.repr, b.repr) )
	}

	public operator func greaterThanEq(b: Self): Bool {
		Bool (repr: integer8CmpGteSig(self.repr, b.repr) )
	}

	public operator func unit(): Self {
		self
	}
	
	public operator func negate(): Self {
		Self (repr: integer8Negate(self.repr) )
	}

	public operator func invert(): Self {
		Self (repr: integer8Invert(self.repr) )
	}

	public operator func openRange(upper: Self): Int8Range {
		Int8Range(low: self, high: upper + 1)
	}

	public operator func closedRange(upper: Self): Int8Range {
		Int8Range(low: self, high: upper)
	}

	public init(truncating i: UInt16) {
		Self (repr: integer16Trunc8(i.repr) )
	}

	public init(truncating i: UInt32) {
		Self (repr: integer32Trunc8(i.repr) )
	}

	public init(truncating i: UInt64) {
		Self (repr: integer64Trunc8(i.repr) )
	}

	public init(truncating i: Int16) {
		Self (repr: integer16Trunc8(i.repr) )
	}

	public init(truncating i: Int32) {
		Self (repr: integer32Trunc8(i.repr) )
	}

	public init(truncating i: Int64) {
		Self (repr: integer64Trunc8(i.repr) )
	}

	// Convert from unsigned integers

	public init(bitcast i: UInt8) {
		Self (repr: i.repr )
	}
}

public struct Int8Range {
	fileprivate var low: Int8
	fileprivate var high: Int8
}

public func for(range: Int8Range, closure: func (Int8)) {
	if range.low != range.high {
		closure(range.low);
		for(range.low + 1..<range.high, closure)
	}
}