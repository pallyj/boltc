import intrinsics

@transparent
public struct Int16 /*: IntegerLiteralRepr */ {
	public static let min: Int16 = 0xffff
	public static let max: Int16 = 0x7fff

	internal var repr: i16

	public operator func add(b: Self): Self {
		Self(repr: integer16Add(self.repr, b.repr) )
	}

	public operator func sub(b: Self): Self {
		Self(repr: integer16Sub(self.repr, b.repr) )
	}

	public operator func mul(b: Self): Self {
		Self (repr: integer16Mul(self.repr, b.repr) )
	}

	public operator func div(b: Self): Self {
		Self (repr: integer16DivSig(self.repr, b.repr) )
	}

	public operator func mod(b: Self): Self {
		Self (repr: integer16RemSig(self.repr, b.repr) )
	}


	public operator func or(b: Self): Self {
		Self (repr: integer16Or(self.repr, b.repr) )
	}

	public operator func xor(b: Self): Self {
		Self (repr: integer16Xor(self.repr, b.repr) )
	}

	public operator func and(b: Self): Self {
		Self (repr: integer16And(self.repr, b.repr) )
	}

	public operator func shiftLeft(b: Self): Self {
		Self (repr: integer16Shl(self.repr, b.repr) )
	}

	public operator func shiftRight(b: Self): Self {
		Self (repr: integer16ShrSig(self.repr, b.repr) )
	}


	public operator func equal(b: Self): Bool {
		Bool (repr: integer16CmpEq(self.repr, b.repr) )
	}

	public operator func notEqual(b: Self): Bool {
		Bool (repr: integer16CmpNeq(self.repr, b.repr) )
	}

	public operator func lessThan(b: Self): Bool {
		Bool (repr: integer16CmpLtSig(self.repr, b.repr) )
	}

	public operator func greaterThan(b: Self): Bool {
		Bool (repr: integer16CmpGtSig(self.repr, b.repr) )
	}

	public operator func lessThanEq(b: Self): Bool {
		Bool (repr: integer16CmpLteSig(self.repr, b.repr) )
	}

	public operator func greaterThanEq(b: Self): Bool {
		Bool (repr: integer16CmpGteSig(self.repr, b.repr) )
	}

	public operator func unit(): Self {
		self
	}
	
	public operator func negate(): Self {
		Self (repr: integer16Negate(self.repr) )
	}

	public operator func invert(): Self {
		Self (repr: integer16Invert(self.repr) )
	}

	public operator func openRange(upper: Self): Int16Range {
		Int16Range(low: self, high: upper + 1)
	}

	public operator func closedRange(upper: Self): Int16Range {
		Int16Range(low: self, high: upper)
	}

	public init(i: UInt8) {
		Self (repr: integer8ExtZero16(i.repr) )
	}

	public init(truncating i: UInt32) {
		Self (repr: integer32Trunc16(i.repr) )
	}

	public init(truncating i: UInt64) {
		Self (repr: integer64Trunc16(i.repr) )
	}

	public init(i: Int8) {
		Self (repr: integer8ExtSig16(i.repr) )
	}

	public init(truncating i: Int32) {
		Self (repr: integer32Trunc16(i.repr) )
	}

	public init(truncating i: Int64) {
		Self (repr: integer64Trunc16(i.repr) )
	}

	// Convert from integers

	public init(bitcast i: UInt16) {
		Self (repr: i.repr )
	}
}


public struct Int16Range {
	fileprivate var low: Int16
	fileprivate var high: Int16
}

public func for(range: Int16Range, closure: func (Int16)) {
	if range.low != range.high {
		closure(range.low);
		for(range.low + 1..<range.high, closure)
	}
}