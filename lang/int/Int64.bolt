import intrinsics

@transparent
public struct Int64 /*: IntegerLiteralRepr */ {
	public static let min: Int64 = 0xffff_ffff_ffff_ffff
	public static let max: Int64 = 0x7fff_ffff_ffff_ffff

	internal var repr: i64

	public operator func add(b: Self): Self {
		Self(repr: integer64Add(self.repr, b.repr) )
	}

	public operator func sub(b: Self): Self {
		Self(repr: integer64Sub(self.repr, b.repr) )
	}

	public operator func mul(b: Self): Self {
		Self (repr: integer64Mul(self.repr, b.repr) )
	}

	public operator func div(b: Self): Self {
		Self (repr: integer64DivSig(self.repr, b.repr) )
	}

	public operator func mod(b: Self): Self {
		Self (repr: integer64RemSig(self.repr, b.repr) )
	}


	public operator func bitOr(b: Self): Self {
		Self (repr: integer64Or(self.repr, b.repr) )
	}

	public operator func bitXor(b: Self): Self {
		Self (repr: integer64Xor(self.repr, b.repr) )
	}

	public operator func bitAnd(b: Self): Self {
		Self (repr: integer64And(self.repr, b.repr) )
	}

	public operator func shiftLeft(b: Self): Self {
		Self (repr: integer64Shl(self.repr, b.repr) )
	}

	public operator func shiftRight(b: Self): Self {
		Self (repr: integer64ShrSig(self.repr, b.repr) )
	}


	public operator func equal(b: Self): Bool {
		Bool (repr: integer64CmpEq(self.repr, b.repr) )
	}

	public operator func notEqual(b: Self): Bool {
		Bool (repr: integer64CmpNeq(self.repr, b.repr) )
	}

	public operator func lessThan(b: Self): Bool {
		Bool (repr: integer64CmpLtSig(self.repr, b.repr) )
	}

	public operator func greaterThan(b: Self): Bool {
		Bool (repr: integer64CmpGtSig(self.repr, b.repr) )
	}

	public operator func lessThanEq(b: Self): Bool {
		Bool (repr: integer64CmpLteSig(self.repr, b.repr) )
	}

	public operator func greaterThanEq(b: Self): Bool {
		Bool (repr: integer64CmpGteSig(self.repr, b.repr) )
	}

	
	public operator func negate(): Self {
		Self (repr: integer64Negate(self.repr) )
	}

	public operator func invert(): Self {
		Self (repr: integer64Invert(self.repr) )
	}

	public operator func unit(): Self {
		self
	}

	public operator func openRange(upper: Self): Int64Range {
		Int64Range(low: self, high: upper + 1)
	}

	public operator func closedRange(upper: Self): Int64Range {
		Int64Range(low: self, high: upper)
	}

	
	public init(f: Float) {
		Int64 (repr: float32ToIntSig(f.repr) )
	}

	public init(f: Double) {
		Int64 (repr: float64ToIntSig(f.repr) )
	}

	public init(f: Half) {
		Int64 (repr: float16ToIntSig(f.repr) )
	}

	public init(i: Int8) {
		Int64 (repr: integer8ExtSig64(i.repr) )
	}

	public init(i: Int16) {
		Int64 (repr: integer16ExtSig64(i.repr) )
	}

	public init(i: Int32) {
		Int64 (repr: integer32ExtSig64(i.repr) )
	}

	public init(i: Int) {
		Int64 (repr: i.repr )
	}

	public init(i: UInt8) {
		Int64 (repr: integer8ExtZero64(i.repr) )
	}

	public init(i: UInt16) {
		Int64 (repr: integer16ExtZero64(i.repr) )
	}

	public init(i: UInt32) {
		Int64 (repr: integer32ExtZero64(i.repr) )
	}

	// Convert from integers

	public init(bitcast i: UInt64) {
		Int64 (repr: i.repr )
	}

	public init(bitcast i: UInt) {
		Int64 (repr: i.repr )
	}
}

public struct Int64Range {
	fileprivate var low: Int64
	fileprivate var high: Int64
}

public func for(range: Int64Range, closure: func (Int64)) {
	if range.low != range.high {
		closure(range.low);
		for(range.low + 1..<range.high, closure)
	}
}