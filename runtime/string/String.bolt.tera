{% import "Optional.bolt.tera" as Optional %}

import intrinsics

///
/// A string type with full unicode support represented by UTF-8
///
@defaultStringRepr
public struct String {
	internal var ptr: RawPointer<i8>
	internal var len: i64

	///
	/// Returns the byte length of this string
	///
	public func length() -> Int {
		Int(repr: self.len)
	}

	/*public operator func equal(other: String) -> Bool {
		if self.len != other.len {
			return false
		}

		let var i = 0;

		/*while i < self.len {
			if ptr.offset(i) != other.offset(i) {
				return false
			}

			i += 1
		}*/

		return true
	}

	public operator func notEqual(other: String) -> Bool {
		if self.len == other.len {
			return false
		}

		let var i = 0;

		/*while i < self.len {
			if ptr.offset(i) == ptr.offset.offset(i) {
				return false
			}

			i += 1
		}*/

		return true
	}

	public operator func index(range: IntRange) -> String.Optional {
		let len = self.length();

		if (range.top() >= len) || (range.bottom() < 0) { return .none; }
		if range.top() < range.bottom() { return .none; }

		let slice = strslice_slice(self.slice, range.bottom(), range.top())
		let self_slice: Self = Self(slice: slice)

		return .some(slice)
	}

	public operator func index(unchecked range: IntRange) -> String {
		String(self.ptr.add(range.bottom()), len: range.top() - range.bottom() )
	}

	public operator func index(wrapped range: IntRange) -> String.Optional {
		// todo: any type should undiverge
		let bottom = match self.indexOf(wrapped: range.bottom()) {
			.some(bottom) => bottom,
			// Why is the return part of the pattern?
			.none => { return .none }
		};

		let top = match self.indexOf(wrapped: range.top()) {
			.some(top) => top,
			.none => { return .none }
		};

		let range: IntRange = bottom..<top;

		.some(self[unchecked: range])
	}

	public operator func index(index: Int) -> Char.Optional {
		if index >= self.length() {
			return .none
		}

		return .some(strslice_index(self.slice, index))
	}

	public operator func index(unchecked index: Int) -> Char {
		strslice_index(self.slice, index)
	}

	public operator func index(wrapped index: Int) -> Char.Optional {
		self.indexOf(wrapped: index).map { }

		match self.indexOf(wrapped: index) {
			.some(index) => .some(strslice_index(self.slice, index)),
			.none => .none
		}
	}

	private func indexOf(wrapped index: Int) -> Int.Optional {
		let index = if index < 0 {
			self.length() + index
		} else {
			index
		}

		if index >= self.length() {
			return .none
		}

		return .some(index)
	}*/
	{{ Optional::optional(name="String") }}
}

// fileprivate func strslice_eq(one: strslice, two: strslice): Bool
// fileprivate func strslice_neq(one: strslice, two: strslice): Bool
// fileprivate func strslice_index(slice: strslice, idx: Int): Char
// fileprivate func strslice_slice(slice: strslice, start: Int, end: Int): String
// fileprivate func strslice_extend(slice: strslice, delta: Int): String
// fileprivate func strslice_head_slice(slice: strslice, delta: Int): String


/*

String
	subscript(IntRange) -> String?
	subscript(wrapped: IntRange) -> String?
	subscript(unchecked: IntRange) -> String

	subscript(Int) -> Char?
	subscript(wrapped: Int) -> Char?
	subscript(unchecked: Int) -> Char

	equals
	notEquals

	chars() -> Char
	charIndices()
	utf16()
	utf16Indices()
	utf8()

	firstIndex(of: Char)
	endIndex()

	length
	isEmpty

	lines()

	split(by: Char)
	split(once: Char)

	strip(prefix: String)
	strip(suffix: String)

	trim(end: Char)
	trim(start: Char)





*/